version: 2

defaults: &defaults # define defaults for jobs
  docker: # define the docker containers you want, for browsers, suffix '-browsers', to have the image run in memory, use '-ram', etc.
    - image: circleci/node:6-browsers # primary container, the commands in 'steps' execute on this, additional images are run as docker containers
  steps:
    - checkout # checkout the repo branch
    - restore-cache: # detect if you need to update the dependency cache, steps from here until 'save_cache' will only run if they are different. Since this is a nodejs project we'll do this with checksum of package file
        key: deps-{{ checksum "package-lock.json" }}

jobs: # can define different jobs, such as 'build', 'test', 'deploy'
  install:
    <<: *defaults # inject defaults object
    steps:
      - run: # run a command, this one installs the dependencies
          name: Install
          command: npm install
      - save_cache: # if you needed to update the cache, save it for next run
          key: deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules/

  test-unit:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Running unit tests
          command: 'npm run test:unit'
      - store_test_results:
          path: 'test-results/'

  test-e2e:
    <<: *defaults
    steps:
      - run:
          name: Running e2e tests
          command: 'npm run test:e2e'
      - store_test_results:
          path: 'test-results/'

  test-cover:
    <<: *defaults
    steps:
      - run:
          name: Coverage
          command: |
            ./node_modules/.bin/codecov --token=$CODECOV_TOKEN # use CircleCI's environment variables to set this
      - store_artifacts:
          path: 'test-results/coverage'

  build:
    <<: *defaults
    steps:
      - run:
          name: Building
          command: npm run build

  deploy:
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: deploy master branch
          command: echo "Deployed!"

workflows: # allows for running multiple jobs sequentially
  version: 2
  build-test-deploy: # give a name to the workflow
    jobs: # list the jobs you want in it
      - install
      - test-unit:
          requires: # makes sure things run in the right order
            - install
      - test-e2e:
          requires:
            - install
      - test-cover:
          requires:
            - test-unit
            - test-e2e
      # - hold: # this allows you to require manual approval before continuing
      #     type: approval
      #     requires:
      #       - test-cover
      - deploy:
          requires:
            - test-cover
            # - hold
          filters: # makes sure the job is only executed in specific cases
            branches:
              only: master
